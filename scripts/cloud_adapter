#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy

from lawnmower.msg import status, autostart, nav_manager_command, nav_manager_status
from std_msgs.msg import String, Empty
from sensor_msgs.msg import NavSatFix

from geometry_msgs.msg import Vector3

import pyproj
import math


class CloudAdapter():
    def __init__(self):
        rospy.loginfo('Init CloudAdapter')

        self.status_msg = status()
        self.status_msg.header.frame_id = '/world_link'
        self.status_msg.seq_num = 0
        self.status_msg.cmd_name = 'status'
        self.status_msg.cmd_status = 'ok'
        self.status_msg.sat_status = 2
        self.status_msg.lat = 0.0
        self.status_msg.lon = 0.0
        self.status_msg.auto_status = 'stopped'
        self.status_msg.speed_status = 'middle'
        self.status_msg.grass_status = 'stop'

        self.wgs84 = pyproj.Proj(init='EPSG:4326')
        self.rect6 = pyproj.Proj(init='EPSG:2444')
        self.origin_lat = rospy.get_param('~origin_lat', 33.0)
        self.origin_lng = rospy.get_param('~origin_lng', 130.0)
        self.angle_offset = math.radians(rospy.get_param('~angle_offset', 0.0))
        self.scale_offset = rospy.get_param('~scale_offset', 1.0)
        self.gnss_fix_value = rospy.get_param('~fix_value', 1)
        self.gnss_float_value = rospy.get_param('~float_value', 0)

        self.pub_status = rospy.Publisher(rospy.get_param('~pub_topic_status', 'status'), status, queue_size=10)

        rospy.Subscriber(rospy.get_param('~sub_topic_auto_start', 'auto_start'), autostart, self.callback_auto_start, queue_size=1)
        rospy.Subscriber(rospy.get_param('~sub_topic_auto_stop', 'auto_stop'), Empty, self.callback_auto_stop, queue_size=1)
        rospy.Subscriber(rospy.get_param('~sub_topic_speed', 'speed'), String, self.callback_speed, queue_size=1)
        rospy.Subscriber(rospy.get_param('~sub_topic_grass_start', 'grass_start'), Empty, self.callback_grass_start, queue_size=1)
        rospy.Subscriber(rospy.get_param('~sub_topic_grass_stop', 'grass_stop'), Empty, self.callback_grass_stop, queue_size=1)

        self.pub_nav_manager_command = rospy.Publisher('/nav_manager/command', nav_manager_command, queue_size=10)

        rospy.Subscriber('/fix', NavSatFix, self.callback_fix, queue_size=10)
        rospy.Subscriber('/filtered_latlng', NavSatFix, self.callback_filtered_latlng, queue_size=10)
        rospy.Subscriber('/nav_manager/status', nav_manager_status, self.callback_nav_manager_status, queue_size=1)


    def callback_auto_start(self, data):
        rospy.loginfo('Auto Start')

        self.status_msg.seq_num = data.seq_num
        
        cmd = nav_manager_command()
        cmd.command = 'start'
        cmd.position_list = []
        for latlon in data.target_position:
            x, y = self.latlng2xy(latlon.lat, latlon.lon)
            cmd.position_list.append(Vector3(x, y, 0))

        self.pub_nav_manager_command.publish(cmd)


    def latlng2xy(self, lat, lng):
        x_origin, y_origin = pyproj.transform(self.wgs84, self.rect6, self.origin_lng, self.origin_lat)
        x_ref, y_ref = pyproj.transform(self.wgs84, self.rect6, lng, lat)
        tx = math.cos(self.angle_offset) * (x_ref - x_origin) - math.sin(self.angle_offset) * (y_ref - y_origin)
        ty = math.sin(self.angle_offset) * (x_ref - x_origin) + math.cos(self.angle_offset) * (y_ref - y_origin)
        x = tx * self.scale_offset
        y = ty * self.scale_offset
        print(lat, lng, x, y)
        #print(self.origin_lat, self.origin_lng, self.angle_offset, self.scale_offset)
        return x, y


    def callback_auto_stop(self, data):
        rospy.loginfo('Auto Stop')

        cmd = nav_manager_command()
        cmd.command = 'stop'
        cmd.position_list = []
        self.pub_nav_manager_command.publish(cmd)


    def callback_speed(self, data):
        rospy.loginfo('Speed (Not Implemented)')


    def callback_grass_start(self, data):
        rospy.loginfo('Grass Start (Not Implemented)')


    def callback_grass_stop(self, data):
        rospy.loginfo('Grass Stop (Not Implemented)')


    def callback_fix(self, data):
        #rospy.loginfo('fix')
        # fix   : 0
        # float : 1
        # other : 2
        if data.status.status == self.gnss_fix_value:
            self.status_msg.sat_status = 0
        elif data.status.status == self.gnss_float_value:
            self.status_msg.sat_status = 1
        else:
            self.status_msg.sat_status = 2


    def callback_filtered_latlng(self, data):
        #rospy.loginfo('filtered_latlng')

        self.status_msg.lat = data.latitude
        self.status_msg.lon = data.longitude


    def callback_nav_manager_status(self, data):
        #rospy.loginfo('navmanager/status')

        if data.status == 'stop':
            self.status_msg.auto_status = 'stopped'
        elif data.status == 'pause':
            self.status_msg.auto_status = 'stopped'
        elif data.status == 'run':
            self.status_msg.auto_status = 'running'


    def publish_status(self):
        #rospy.loginfo('Publish Status')

        '''
        msg = status()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = self.status_msg.header.frame_id
        msg.seq_num = self.status_msg.seq_num
        msg.cmd_name = self.status_msg.cmd_name
        msg.cmd_status = self.status_msg.cmd_status
        msg.sat_status = self.status_msg.sat_status
        msg.lat = self.status_msg.lat
        msg.lon = self.status_msg.lon
        msg.auto_status =self.status_msg.auto_status
        msg.speed_status = self.status_msg.speed_status
        msg.grass_status = self.status_msg.grass_status
        '''
        self.status_msg.header.stamp = rospy.Time.now()
        self.pub_status.publish(self.status_msg)


if __name__ == "__main__":
    rospy.init_node('cloud_adapter', anonymous=True)
    rospy.loginfo("cloud_adapter: Node Start")

    rate = rospy.Rate(5)

    try:
        cloud_adapter = CloudAdapter()
        #rospy.spin()
        while not rospy.is_shutdown():
            cloud_adapter.publish_status()
            rate.sleep()

    except rospy.ROSInterruptException:
        pass